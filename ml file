import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

r1 = files.upload()
df = "Resume-Mano-Ranjitham.pdf"

from pypdf import PdfReader
import re

reader = PdfReader(df)
full_text = []
req = ""
for page in reader.pages:
    req += page.extract_text() + "\n"
    text = page.extract_text() or " "
    text = re.sub(r'\s+',' ',text)
    text = re.sub(r'[^A-Za-z0-9 ]+',' ',text)
    text = text.strip()
    if text:
      full_text.append(text)
print(full_text)


from transformers import BertTokenizer, BertModel
import torch
from sentence_transformers import SentenceTransformer, util
model = SentenceTransformer('bert-base-uncased')

def get_similarity(text1, text2):
    emb1 = model.encode(text1, convert_to_tensor=True)
    emb2 = model.encode(text2, convert_to_tensor=True)
    return util.pytorch_cos_sim(emb1, emb2).item() * 100

def extract_skills(text):
    skill_keywords = ["Python","Java", "C++","C", "C#", "Go","JavaScript", "TypeScript", "HTML", "CSS", "SCSS","SQL", "PL/SQL","Git", "GitHub", "GitLab","Data Structures & Algorithms",
"Object-Oriented Programming (OOP)", "RESTful APIs", "Unit Testing / Test-Driven Development (TDD)", "Cloud", "DevOps", "AWS", "Azure", "Google Cloud Platform (GCP)", "Docker", "Kubernetes",
"Jenkins", "GitLab CI/CD", "CircleCI", "Terraform", "Ansible", "Linux/Unix Shell Scripting", "Monitoring", "Prometheus", "Grafana", "Networking & Load Balancing", "Data Science", "Machine Learning",
"NumPy", "Pandas", "Scikit-learn", "R Language", "Jupyter Notebooks", "TensorFlow", "PyTorch", "OpenCV", "NLTK", "Spacy", "Power BI", "Tableau", "SQL", "NoSQL", "Data Cleaning", "Visualization", "Model Deployment",
"Web Development", "React.js", "Angular", "Vue.js", "Node.js", "Express.js", "Django", "Flask","MySQL", "PostgreSQL", "MongoDB", "API Integration", "Responsive Design", "Bootstrap", "Mobile Development","Android (Java/Kotlin)",
"iOS (Swift)","Flutter", "React Native", "Firebase", "SQLite", "Cybersecurity", "Kali Linux", "Burp Suite", "Wireshark", "Network Security", "Web Application Security", "OWASP Top 10", "Ethical Hacking", "Cryptography",
"QA / Testing","Manual Testing","Selenium", "Appium","JUnit", "TestNG","Postman","Bug Tracking Tools (JIRA)","Performance Testing (JMeter)", "IT Support / System Admin", "Windows/Linux Administration",
"Active Directory", "Networking Protocols (TCP/IP, DNS, DHCP)", "Jira", "Confluence VS Code", "IntelliJ", "Eclipse","Agile/Scrum methodologies", "Communication", "Teamwork", "Time Management", "Problem Solving"]
    found = [skill for skill in skill_keywords if skill.lower() in text.lower()]
    return found

def extract_experience_years(text):
    match = re.search(r'(\d+)\s*(?:year|yr)', text.lower())
    return int(match.group(1)) if match else 0

def detect_role_type(job_desc):
    if re.search(r'0[\s-]*\d*\s*(year|yr)', job_desc.lower()) or 'fresher' in job_desc.lower():
        return "both"
    elif re.search(r'(\d+)\s*(year|yr)', job_desc.lower()):
        return "experienced"
    else:
        return "fresher"

def check_college_score(resume_text):
    college_tiers = {
    "tier_1": [
        "IIT Madras", "IIT Delhi", "IIT Bombay", "IIT Kanpur",
        "IIT Kharagpur", "IIT Roorkee", "IIT Guwahati", "IIT Hyderabad",
        "IIIT Hyderabad", "BITS Pilani", "IISc Bangalore", "NIT Trichy",
        "NIT Surathkal", "DTU", "NSUT Delhi", "Jadavpur University"
         ],
    "tier_2": [
        "VIT Vellore", "SRM Institute of Science and Technology",
        "Amrita Vishwa Vidyapeetham", "Anna University", "IIIT Delhi",
        "MNNIT Allahabad", "PEC Chandigarh", "MNIT Jaipur",
        "BIT Mesra", "RV College of Engineering", "Manipal Institute of Technology",
        "COEP Pune", "Christ University", "Lovely Professional University",
        "KIIT Bhubaneswar"
         ],
    "tier_3": [
        "State College of Engineering", "Regional Technical Institute",
        "Generic Engineering College", "Unranked Polytechnic", "Community Technical College",
        "Unknown University", "ABC Institute of Technology",
        "XYZ College of Engineering", "Small Town Engineering College",
        "Local Engineering College"
         ]
    }

    for tier, colleges in college_tiers.items():
        for college in colleges:
            if college.lower() in resume_text.lower():
                if tier == "tier_1": return 15
                elif tier == "tier_2": return 10
                elif tier == "tier_3": return 5
                else: return 3
    return 0

def check_project_score(resume_text):
    project_quality = {
    "good ": [
        "machine learning", "deep learning", "natural language processing",
        "computer vision", "data science", "big data analytics",
        "cloud computing", "blockchain", "cybersecurity",
        "internet of things", "artificial intelligence"
         ],
    "average": [
        "web development", "android app development", "inventory management system",
        "database management system", "desktop application",
        "simple e-commerce", "chatbot without nlp", "portfolio website",
        "quiz application"
         ],
    "basic": [
        "calculator app", "to-do list", "tic tac toe game",
        "snake game", "hello world", "static html page",
        "digital clock", "notepad clone", "basic crud app"
         ]
    }
    for quality, keywords in project_quality.items():
        for kw in keywords:
            if kw.lower() in resume_text.lower():
                if quality == "good": return 15
                elif quality == "average": return 8
                elif quality == "bad": return 2
                else: return 1
    return 0

def word_count(text):
    return len(text.split())

# -------- ATS Scoring Function --------
def ats_score(job_title, job_desc, resume):
    score = 0
    role_type = detect_role_type(job_desc)

    # Check Experience
    resume_exp_years = extract_experience_years(resume)
    if role_type == "experienced" and resume_exp_years == 0:
        return 0 # immediate reject

    if role_type == "fresher":
        if "internship" in resume.lower():
            score += 10
    elif role_type == "both":
        score += 5 if "internship" in resume.lower() else 0
        score += min(resume_exp_years * 5, 15)
    else: # experienced
        score += min(resume_exp_years * 10, 30)

    # Skills Matching
    jd_skills = extract_skills(job_desc)
    resume_skills = extract_skills(resume)
    matched_skills = set(jd_skills) & set(resume_skills)
    score += len(matched_skills) * 5 # 5 points per match

    # Project Evaluation
    if "project" in resume.lower():
        proj_len = word_count(resume)
        if proj_len > 50:
            score += 10
        if get_similarity(job_desc, resume) > 60:
            score += 10

    # BERT Similarity Bonus
    sim_title = get_similarity(job_title, resume)
    sim_desc = get_similarity(job_desc, resume)
    score += (sim_title * 0.1) + (sim_desc * 0.1) # weighted

    # college ranking bonus
    col_title = check_college_score(resume)
    score += col_title

    #project bonus
    project_mark = check_project_score(resume)
    score += project_mark

    # Normalize to 100
    return min(round(score, 2), 100)


job_title = "Data Analyst"
job_desc = """
Looking for fresher or experienced candidates with 0-2 years experience.
Skills required: Python, SQL, Excel, Power BI.
"""
resume_text = req

print("ATS Score:", ats_score(job_title, job_desc, resume_text))
